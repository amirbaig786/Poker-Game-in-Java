/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sem56;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Asus
 */
public class GameTable50_2 extends javax.swing.JFrame {

    /**
     * Creates new form GameTable50
     */
    public GameTable50_2(int noofpl,int amt[]){
        initComponents();
        this.noofpl=noofpl;
        this.amt=amt;
        cards=new String[noofpl][2];
        card=new int[2][2];
        playerturn=new int[noofpl+1];
        check.setVisible(false);
            fold.setVisible(false);
            call.setVisible(false);
            raise.setVisible(false);
            raiseamt.setVisible(false);
            bet.setVisible(false);
    }
    static int noofpl,amt[];
    static String cards[][];
    static int card[][];
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel16 = new javax.swing.JLabel();
        c5 = new javax.swing.JLabel();
        c4 = new javax.swing.JLabel();
        c3 = new javax.swing.JLabel();
        c2 = new javax.swing.JLabel();
        c1 = new javax.swing.JLabel();
        p2 = new javax.swing.JLabel();
        p1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        showcards = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        call = new javax.swing.JButton();
        check = new javax.swing.JButton();
        fold = new javax.swing.JButton();
        raise = new javax.swing.JButton();
        raiseamt = new javax.swing.JTextField();
        bet = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Blinds $50");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(860, 570, 70, 20);

        c5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        c5.setForeground(new java.awt.Color(255, 255, 255));
        c5.setText("card 5");
        getContentPane().add(c5);
        c5.setBounds(610, 280, 90, 17);

        c4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        c4.setForeground(new java.awt.Color(255, 255, 255));
        c4.setText("card 4");
        getContentPane().add(c4);
        c4.setBounds(500, 280, 90, 17);

        c3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        c3.setForeground(new java.awt.Color(255, 255, 255));
        c3.setText("card 3");
        getContentPane().add(c3);
        c3.setBounds(410, 280, 80, 16);

        c2.setBackground(new java.awt.Color(255, 255, 255));
        c2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        c2.setForeground(new java.awt.Color(255, 255, 255));
        c2.setText("card 2");
        getContentPane().add(c2);
        c2.setBounds(320, 280, 80, 17);

        c1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        c1.setForeground(new java.awt.Color(255, 255, 255));
        c1.setText("card 1");
        getContentPane().add(c1);
        c1.setBounds(230, 280, 80, 20);

        p2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        p2.setForeground(new java.awt.Color(255, 255, 255));
        p2.setText("Player 2");
        getContentPane().add(p2);
        p2.setBounds(90, 160, 70, 17);

        p1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        p1.setForeground(new java.awt.Color(255, 255, 255));
        p1.setText("Player1");
        getContentPane().add(p1);
        p1.setBounds(260, 50, 60, 17);

        jButton1.setText("Deal");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(420, 60, 90, 25);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("STATUS");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(550, 10, 70, 30);

        jButton2.setText("SHOW CARDS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 10, 130, 25);
        getContentPane().add(showcards);
        showcards.setBounds(170, 10, 350, 22);
        getContentPane().add(status);
        status.setBounds(640, 12, 300, 30);

        call.setText("CALL");
        call.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callActionPerformed(evt);
            }
        });
        getContentPane().add(call);
        call.setBounds(40, 540, 70, 25);

        check.setText("CHECK");
        check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActionPerformed(evt);
            }
        });
        getContentPane().add(check);
        check.setBounds(20, 70, 79, 25);

        fold.setText("FOLD");
        fold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foldActionPerformed(evt);
            }
        });
        getContentPane().add(fold);
        fold.setBounds(850, 70, 70, 25);

        raise.setText("RAISE");
        raise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseActionPerformed(evt);
            }
        });
        getContentPane().add(raise);
        raise.setBounds(837, 530, 80, 25);

        raiseamt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseamtActionPerformed(evt);
            }
        });
        getContentPane().add(raiseamt);
        raiseamt.setBounds(710, 470, 130, 40);

        bet.setText("BET");
        bet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                betActionPerformed(evt);
            }
        });
        getContentPane().add(bet);
        bet.setBounds(859, 475, 80, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sem56/table1.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 950, 600);

        setSize(new java.awt.Dimension(968, 650));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    static int c=0;
    static int playerturn[];
    static int pos=0;
    static int prevraise=0;
    static int pl1=0,pl2=0;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        c++;
        String s="";
        int i,j;
        if(c==1){
            for(i=0;i<noofpl;i++){
                cards[i][0]=randcard();
                cards[i][1]=randcard();
            }
            JOptionPane.showMessageDialog(null, "Cards have been distributed to the players.");
            for(j=0;j<noofpl;j++){
            String car = cards[j][0].substring(0 ,  cards[j][0].indexOf(" "));
         if(car.equals("J"))
             card[j][0]=11;
         else if(car.equals("Q"))
             card[j][0]=12;
         else if(car.equals("K"))
             card[j][0]=13;
         else if(car.equals("A"))
             card[j][0]=14;
         else
             card[j][0]=Integer.parseInt(car);
         car = cards[j][1].substring(0 ,  cards[j][1].indexOf(" "));
         if(car.equals("J"))
             card[j][1]=11;
         else if(car.equals("Q"))
             card[j][1]=12;
         else if(car.equals("K"))
             card[j][1]=13;
         else if(car.equals("A"))
             card[j][1]=14;
          else
             card[j][1]=Integer.parseInt(car);
        }
                  
            }
        else if(c==2){
            int cardno1,cardno2,cardno3;
            String card1=randcard();
            String card2=randcard();
            String card3=randcard();
            c1.setText(card1);
            c2.setText(card2);
            c3.setText(card3);
            for(i=0;i<2;i++){
                 String car = card1.substring(0 ,  card1.indexOf(" "));
         if(car.equals("J"))
             cardno1=11;
         else if(car.equals("Q"))
             cardno1=12;
         else if(car.equals("K"))
             cardno1=13;
         else if(car.equals("A"))
             cardno1=14;
         else
             cardno1=Integer.parseInt(car);
         if(card[i][0]==cardno1){
             if(i==0)
                 pl1++;
             else 
                 pl2++;
            }
         if(card[i][1]==cardno1){
             if(i==0)
                 pl1++;
             else
                 pl2++;
            }}
             for(i=0;i<2;i++){
                 String car = card2.substring(0 ,  card2.indexOf(" "));
         if(car.equals("J"))
             cardno2=11;
         else if(car.equals("Q"))
             cardno2=12;
         else if(car.equals("K"))
             cardno2=13;
         else if(car.equals("A"))
             cardno2=14;
         else
             cardno2=Integer.parseInt(car);
         if(card[i][0]==cardno2){
             if(i==0)
                 pl1++;
             else 
                 pl2++;
            }
         if(card[i][1]==cardno2){
             if(i==0)
                 pl1++;
             else
                 pl2++;
            }}
              for(i=0;i<2;i++){
                 String car = card3.substring(0 ,  card3.indexOf(" "));
         if(car.equals("J"))
             cardno3=11;
         else if(car.equals("Q"))
             cardno3=12;
         else if(car.equals("K"))
             cardno3=13;
         else if(car.equals("A"))
             cardno3=14;
         else
             cardno3=Integer.parseInt(car);
         if(card[i][0]==cardno3){
             if(i==0)
                 pl1++;
             else 
                 pl2++;
            }
         if(card[i][1]==cardno3){
             if(i==0)
                 pl1++;
             else
                 pl2++;
            }}
            status.setText("Player 1's turn | Price:"+amt[0]);
            check.setVisible(true);
            fold.setVisible(true);
            call.setVisible(true);
            raise.setVisible(true);
           pos=1;
           jButton1.setVisible(false);
        }
        else if(c==3){
            int cardno4;
            String card4=randcard();
            c4.setText(card4);
            for(i=0;i<2;i++){
                 String car = card4.substring(0 ,  card4.indexOf(" "));
         if(car.equals("J"))
             cardno4=11;
         else if(car.equals("Q"))
             cardno4=12;
         else if(car.equals("K"))
             cardno4=13;
         else if(car.equals("A"))
             cardno4=14;
         else
             cardno4=Integer.parseInt(car);
         if(card[i][0]==cardno4){
             if(i==0)
                 pl1++;
             else 
                 pl2++;
            }
         if(card[i][1]==cardno4){
             if(i==0)
                 pl1++;
             else
                 pl2++;
            }}
            pos=(pos%(noofpl+1))+1;
            while(playerturn[pos]==-1)
                pos=(pos%(noofpl+1))+1;
            status.setText("Player "+pos+"'s turn | Price:"+amt[pos-1]);
            check.setVisible(true);
            fold.setVisible(true);
            call.setVisible(true);
            raise.setVisible(true);
            jButton1.setVisible(false);
        }
       else if(c==4){
           int cardno5;
           String card5=randcard();
            c5.setText(card5);
            for(i=0;i<2;i++){
                 String car = card5.substring(0 ,  card5.indexOf(" "));
         if(car.equals("J"))
             cardno5=11;
         else if(car.equals("Q"))
             cardno5=12;
         else if(car.equals("K"))
             cardno5=13;
         else if(car.equals("A"))
             cardno5=14;
         else
             cardno5=Integer.parseInt(car);
         if(card[i][0]==cardno5){
             if(i==0)
                 pl1++;
             else 
                 pl2++;
            }
         if(card[i][1]==cardno5){
             if(i==0)
                 pl1++;
             else
                 pl2++;
            }}
//            boolean r=royalflush(1);
            pos=(pos%(noofpl+1))+1;
            while(playerturn[pos]==-1)
                pos=(pos%(noofpl+1))+1;
            status.setText("Player "+pos+"'s turn | Price:"+amt[pos-1]);
            check.setVisible(true);
            fold.setVisible(true);
            call.setVisible(true);
            raise.setVisible(true);
            jButton1.setVisible(false);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    void hash(){
        HashMap<String,Integer> map=new HashMap<String,Integer>();
        map.put("Royal Flush",1);
        map.put("Straight Flush",2);
        map.put("Flush",3);
        map.put("Straight",4);
        map.put("Four Of A Kind",5);
        map.put("Three Of A Kind",6);
        map.put("Two Pair",7);
        map.put("One Pair",8);
    }
    boolean straight(){
        String t[];
        t=new String[7];
        t[0]="K Diamonds";
        t[1]="Q Diamonds";
        t[2]="10 Diamonds";
        t[3]="J Diamonds";
        t[4]="5 Hearts";
        t[5]="A Clubs";
        t[6]="A Diamonds";
        int card[]=new int[7];
        for(int i=0;i<7;i++)
        {
        
         String car = t[i].substring(0 ,  t[i].indexOf(" "));
         if(car.equals("J"))
             card[i]=11;
         else if(car.equals("Q"))
             card[i]=12;
         else if(car.equals("K"))
             card[i]=13;
         else if(car.equals("A"))
             card[i]=14;
         else{
             card[i]=Integer.parseInt(car);
         }
        }
        Arrays.sort(card);
        int c = 0 ;
        for(int j=0 ; j<4 ; j++)
        {
            if((card[j]==card[j+1]-1))
                    c++;
        }
        
        int c2 = 0 ;
         for(int j=1 ; j<5 ; j++)
        {
            if(card[j]==card[j+1]-1)
                    c2++;
        }
         
         int c3 = 0 ;
        for(int j=2; j<6 ; j++)
        {
            if(card[j]==card[j+1]-1)
                    c3++;
        }
//        if(c==4 || c2==4 || c3==4)
            
         
         return true;
            }
    boolean royalflush(int i){
        String t[],cc1,cc2;
//        cc1=cards[i][0].substring(0,cards[i][0].indexOf(" "));
//        cc2=cards[i][1].substring(0,cards[i][1].indexOf(" "));
        cc1=cards[i][0];
        cc2=cards[i][1];
        t=new String[7];
//        t[0]= c1.getText().substring(0,c1.getText().indexOf(" "));
//        t[1]= c2.getText().substring(0,c1.getText().indexOf(" "));
//        t[2]= c3.getText().substring(0,c1.getText().indexOf(" "));
//        t[3]= c4.getText().substring(0,c1.getText().indexOf(" "));
//        t[4]= c5.getText().substring(0,c1.getText().indexOf(" "));
            t[0]= c1.getText();
        t[1]= c2.getText();
        t[2]= c3.getText();
        t[3]= c4.getText();
        t[4]= c5.getText();
        t[5]=cc1 ;
        int flag1=-1 , flag2=-1 , flag3=-1 , flag4 = -1 ;
        t[6]=cc2;
        t[0]="K Diamonds";
        t[1]="Q Diamonds";
        t[2]="10 Diamonds";
        t[3]="J Diamonds";
        t[4]="5 Hearts";
        t[5]="A Clubs";
        t[6]="A Diamonds";
         String diamonds[]=new String[5];
        String hearts[]=new String[5];
        String clubs[]=new String[5];
        String spades[]=new String[5];
        Arrays.fill(diamonds , "AAA");
        Arrays.fill(spades , "AAA");
        Arrays.fill(hearts , "AAA");
        Arrays.fill(clubs , "AAA");
        Arrays.fill(spades , "AAA");
        for(int j=0;j<7;j++)
        {
            String type = t[j].substring(t[j].indexOf(" ")+1);
            
            String car = t[j].substring(0 ,  t[j].indexOf(" "));
            if(type.equals("Diamonds") && (car.equals("K") || car.equals("Q") || car.equals("A") || car.equals("J") || car.equals("10")))
                    diamonds[++flag1]=car ;
            if(type.equals("Hearts") && (car.equals("K") || car.equals("Q") || car.equals("A") || car.equals("J") || car.equals("10")))
                    hearts[++flag2]=car ;
            if(type.equals("Clubs") && (car.equals("K") || car.equals("Q") || car.equals("A") || car.equals("J") || car.equals("10")))
                    clubs[++flag3]=car ;
            if(type.equals("Spades") && (car.equals("K") || car.equals("Q") || car.equals("A") || car.equals("J") || car.equals("10")))
                    spades[++flag4]=car ;
           
        }
       
        
        Arrays.sort(diamonds);
         Arrays.sort(spades);
          Arrays.sort(hearts);
           Arrays.sort(clubs);
//    t[0]="K";
//    t[1]="10";
//    t[2]="Q";
//    t[3]="J";
//    t[4]="A";
//            
//                Arrays.sort(t);
                String t2[] = new String[5];
                t2[0]="A";
                t2[1]="10";
                t2[2]="J";
                t2[3]="Q";
                t2[4]="K";
              Arrays.sort(t2);
//                for(int j=0;j<5;j++)
//                {
//                    System.out.print(t2[j]+" ");
//                }
                if(Arrays.equals((diamonds) , t2) || Arrays.equals(spades, t2) || Arrays.equals((hearts ), t2) || Arrays.equals((clubs ), t2))
                    System.out.println("ROYAL FLUSH");
                System.out.println(cc1+" "+cc2);
                return true;
    }
    static int count=0;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        count++;
        if(count%2==0)
            showcards.setText("");
        else{
        int num=Integer.parseInt(showcards.getText());
        showcards.setText(cards[num-1][0]+","+cards[num-1][1]);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void foldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foldActionPerformed
        // TODO add your handling code here:
        if(playerturn[pos]!=-1)
            playerturn[pos]=-1;
//        pos=(pos%(noofpl+1))+1;
//        if(pos==noofpl+1){
//            status.setText("DEAL");
//            check.setVisible(false);
//            fold.setVisible(false);
//            call.setVisible(false);
//            raise.setVisible(false);
//        }
//        else  
//        status.setText("Player "+pos+"'s turn | Price:"+amt[pos-1]);
        if(pos==1)
            pos=2;
        else
            pos=1;
        JOptionPane.showMessageDialog(null, "Player "+pos+" won!");
        c=0;
        lobby ob=new lobby();
        ob.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_foldActionPerformed

    private void checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
        // TODO add your handling code here:
//        if(playerturn[pos]!=-1)
             pos=(pos%(noofpl+1))+1;
            if(pos==noofpl+1 && c==4){
                c=0;
                if(pl1>pl2){
            JOptionPane.showMessageDialog(null, "Player 1 won!");
            lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
                else if(pl1<pl2){
                    JOptionPane.showMessageDialog(null, "Player 2 won!");
                    lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
                else{
                    JOptionPane.showMessageDialog(null, "It's a Draw!");
                    lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
            }
            else if(pos==noofpl+1){
                jButton1.setVisible(true);
            status.setText("DEAL");
            check.setVisible(false);
            fold.setVisible(false);
            call.setVisible(false);
            raise.setVisible(false);
            }
            else  {
                            status.setText("Player "+pos+"'s turn | Price:"+amt[pos-1]);
                            System.out.println("helloooo");
            }
        
    }//GEN-LAST:event_checkActionPerformed

    private void callActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callActionPerformed
        // TODO add your handling code here:
        if(playerturn[pos]!=-1){
            amt[pos-1]-=prevraise;
        }
        pos=(pos%(noofpl+1))+1;
        if(pos==noofpl+1 && c==4){
            c=0;
                if(pl1>pl2){
            JOptionPane.showMessageDialog(null, "Player 1 won!");
            lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
                else if(pl1<pl2){
                    JOptionPane.showMessageDialog(null, "Player 2 won!");
                    lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
                else{
                    JOptionPane.showMessageDialog(null, "It's a Draw!");
                    lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
            }
        else if(pos==noofpl+1){
            jButton1.setVisible(true);
            status.setText("DEAL");
            check.setVisible(false);
            fold.setVisible(false);
            call.setVisible(false);
            raise.setVisible(false);
        }
        else  
        status.setText("Player "+pos+"'s turn | Price:"+amt[pos-1]);
    }//GEN-LAST:event_callActionPerformed

    private void raiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseActionPerformed
        // TODO add your handling code here:
        if(playerturn[pos]!=-1){
            raiseamt.setVisible(true);  
            bet.setVisible(true);
        }
    }//GEN-LAST:event_raiseActionPerformed

    private void raiseamtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseamtActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_raiseamtActionPerformed

    private void betActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_betActionPerformed
        // TODO add your handling code here:
         prevraise=Integer.parseInt(raiseamt.getText());
            amt[pos-1]-=prevraise;
        
        pos=(pos%(noofpl+1))+1;
        if(pos==noofpl+1 && c==4){
            c=0;
                if(pl1>pl2){
            JOptionPane.showMessageDialog(null, "Player 1 won!");
            lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
                else if(pl1<pl2){
                    JOptionPane.showMessageDialog(null, "Player 2 won!");
                    lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
                else{
                    JOptionPane.showMessageDialog(null, "It's a Draw!");
                    lobby ob=new lobby();
            ob.setVisible(true);
            this.setVisible(false);
                }
            }
        else if(pos==noofpl+1){
            jButton1.setVisible(true);
            status.setText("DEAL");
            check.setVisible(false);
            fold.setVisible(false);
            call.setVisible(false);
            raise.setVisible(false);
        }
        else  
        status.setText("Player "+pos+"'s turn | Price:"+amt[pos-1]);
        raiseamt.setVisible(false);
        bet.setVisible(false);
    }//GEN-LAST:event_betActionPerformed
    
    /**
     * @param args the command line arguments
     */
    
       static boolean visited[] = new boolean[52];
    static int n,rand;
    static int x = -1 ;
    public static int randodo(int min,int max){
        
       if (min>=max){
           throw new IllegalArgumentException("max must be greater than min");
           
       }
       
       Random r =new Random();
       while(x==-1 || visited[x])
       {
       x =  r.nextInt((max-min)+1)+min;
       }
       visited[x]=true ;
       return x ;
    }
    public static String randcard(){
        
        String s[]=new String[52];
        s[0]="2 Hearts";
        s[1]="3 Hearts";
        s[2]="4 Hearts";
        s[3]="5 Hearts";
        s[4]="6 Hearts";
        s[5]="7 Hearts";
        s[6]="8 Hearts";
        s[7]="9 Hearts";
        s[8]="10 Hearts";
        s[9]="J Hearts";
        s[10]="Q Hearts";
        s[11]="K Hearts";
        s[12]="A Hearts";
        s[13]="2 Diamonds";
        s[14]="3 Diamonds";
        s[15]="4 Diamonds";
        s[16]="5 Diamonds";
        s[17]="6 Diamonds";
        s[18]="7 Diamonds";
        s[19]="8 Diamonds";
        s[20]="9 Diamonds";
        s[21]="10 Diamonds";
        s[22]="J Diamonds";
        s[23]="Q Diamonds";
        s[24]="K Diamonds";
        s[25]="A Diamonds";
        s[26]="2 Clubs";
        s[27]="3 Clubs";
        s[28]="4 Clubs";
        s[29]="5 Clubs";
        s[30]="6 Clubs";
        s[31]="7 Clubs";
        s[32]="8 Clubs";
        s[33]="9 Clubs";
        s[34]="10 Clubs";
        s[35]="J Clubs";
        s[36]="Q Clubs";
        s[37]="K Clubs";
        s[38]="A Clubs";
        s[39]="2 Spades";
        s[40]="3 Spades";
        s[41]="4 Spades";
        s[42]="5 Spades";
        s[43]="6 Spades";
        s[44]="7 Spades";
        s[45]="8 Spades";
        s[46]="9 Spades";
        s[47]="10 Spades";
        s[48]="J Spades";
        s[49]="Q Spades";
        s[50]="K Spades";
        s[51]="A Spades";
        return s[randodo(0,51)];
        
        
        
        
        
        
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameTable50.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameTable50.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameTable50.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameTable50.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int arr[]=new int[5];
                new GameTable50_2(1,arr).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bet;
    private javax.swing.JLabel c1;
    private javax.swing.JLabel c2;
    private javax.swing.JLabel c3;
    private javax.swing.JLabel c4;
    private javax.swing.JLabel c5;
    private javax.swing.JButton call;
    private javax.swing.JButton check;
    private javax.swing.JButton fold;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel p1;
    private javax.swing.JLabel p2;
    private javax.swing.JButton raise;
    private javax.swing.JTextField raiseamt;
    private javax.swing.JTextField showcards;
    private javax.swing.JTextField status;
    // End of variables declaration//GEN-END:variables
}
